#!/usr/bin/env python3

import random
import math

# Read the EPSS scores from March 17, 2025, and estimate the predicted number of exploits

# Note that the epss_scores file, below, was generated by pulling the
# list of EPSS scores from ./data/epss-03-17.xlsx.gz, which itself
# was collected from https://epss.cyentia.com/epss_scores-2025-03-17.csv.gz
with open("./data/epss-scores.txt", "r") as f:
    epss_scores = [float(line.strip()) for line in f if line.strip()]

# Sanity check against the mean
mean_epss = sum(epss_scores) / len(epss_scores)
expected_exploitations = round(mean_epss * len(epss_scores))

print("[*] Monte Carlo simulation to predict expected exploitations.")
print(f"[*] Number of EPSS-scored vulns: {len(epss_scores)}")
print(f"[*] Expected number of exploited, based on mean EPSS score: {expected_exploitations}")

# Run Monte Carlo simulations. Should be close to the mean.
simulations = 100 # Or however many you want to run
simulation_results = []

for i in range(simulations):
    exploitation_count = sum(1 for score in epss_scores if round(random.random(), 5) <= score)
    if i % 50 == 0 or i == simulations - 1:
        print(f"    Simulation {i + 1}: {exploitation_count} exploited.")
    simulation_results.append(exploitation_count)

average_exploitations = sum(simulation_results) / simulations

# Figure the standard deviation
mean_of_squares = sum(x ** 2 for x in simulation_results) / simulations
variance = mean_of_squares - (average_exploitations ** 2)
standard_deviation = math.sqrt(variance)

print(f"[*] Average number of exploited vulnerabilities over {simulations} simulations: {round(average_exploitations)}")
print(f"[*] Standard deviation: {round(standard_deviation, 2)}")

one_sd_low = average_exploitations - standard_deviation
one_sd_high = average_exploitations + standard_deviation
two_sd_low = average_exploitations - 2 * standard_deviation
two_sd_high = average_exploitations + 2 * standard_deviation
three_sd_low = average_exploitations - 3 * standard_deviation
three_sd_high = average_exploitations + 3 * standard_deviation

print("[*] Empirical Rule for standard deviations:")
print(f"    68% of simulations fall between {round(one_sd_low)} and {round(one_sd_high)}")
print(f"    95% of simulations fall between {round(two_sd_low)} and {round(two_sd_high)}")
print(f"    99.7% of simulations fall between {round(three_sd_low)} and {round(three_sd_high)}")
